@manual {CoqManual,
    title= "The Coq Reference Manual",
    address= "https://coq.inria.fr/distrib/current/refman/index.html"
}

@book{Pierce,
  author = {Benjamin C. Pierce and Arthur Azevedo de Amorim 
                  and Chris Casinghino and Marco Gaboardi and
                  Michael Greenberg and C\v{a}t\v{a}lin Hri\c{t}cu 
                  and Vilhelm Sj\"{o}berg and Andrew Tolmach
                  and Brent Yorgey},
  title = {Programming Language Foundations},
  series = {Software Foundations series, volume 2},
  month = may,
  year = {2018},
  publisher = {Electronic textbook},
  plclub = {Yes},
  bcp = {Yes},
  keys = {verification,books},
  note = {Version 5.5.  \URL{http://www.cis.upenn.edu/~bcpierce/sf}},
  ebook = {http://www.cis.upenn.edu/~bcpierce/sf},
  japanese = {http://proofcafe.org/sf}
}

@phdthesis{raml,
  author = {Jan Hoffmann},
  title = {{Types with Potential: Polynomial Resource Bounds via Automatic Amortized Analysis}},
  school = {Ludwig-Maximilians-Universi{\"a}t M{\"u}nchen},
  year =  2011
}

@inproceedings{Danner,
 author = {Danner, Norman and Paykin, Jennifer and Royer, James S.},
 title = {A Static Cost Analysis for a Higher-order Language},
 booktitle = {Proceedings of the 7th Workshop on Programming Languages Meets Program Verification},
 series = {PLPV '13},
 year = {2013},
 isbn = {978-1-4503-1860-0},
 location = {Rome, Italy},
 pages = {25--34},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2428116.2428123},
 doi = {10.1145/2428116.2428123},
 acmid = {2428123},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {automated theorem proving, certified bounds, higher-order complexity},
}

@article{Jaskelioff2011ModularityAI,
  title={Modularity and Implementation of Mathematical Operational Semantics},
  author={Mauro Jaskelioff and Neil Ghani and Graham Hutton},
  journal={Electron. Notes Theor. Comput. Sci.},
  year={2011},
  volume={229},
  pages={75-95}
} 

@InProceedings{10.1007/978-3-540-74464-1_5,
author="Capretta, Venanzio
and Felty, Amy P.",
editor="Altenkirch, Thorsten
and McBride, Conor",
title="Combining de Bruijn Indices and Higher-Order Abstract Syntax in Coq",
booktitle="Types for Proofs and Programs",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="63--77",
abstract="The use of higher-order abstract syntax is an important approach for the representation of binding constructs in encodings of languages and logics in a logical framework. Formal meta-reasoning about such object languages is a particular challenge. We present a mechanism for such reasoning, formalized in Coq, inspired by the Hybrid tool in Isabelle. At the base level, we define a de Bruijn representation of terms with basic operations and a reasoning framework. At a higher level, we can represent languages and reason about them using higher-order syntax. We take advantage of Coq's constructive logic by formulating many definitions as Coq programs. We illustrate the method on two examples: the untyped lambda calculus and quantified propositional logic. For each language, we can define recursion and induction principles that work directly on the higher-order syntax.",
isbn="978-3-540-74464-1"
}

@inproceedings{Sands1990CalculiFT,
  title={Calculi for time analysis of functional programs},
  author={David Sands},
  year={1990}
}


@phdthesis{10.5555/1329727,
author = {Van Stone, Kathryn},
advisor = {Brookes, Stephen},
title = {A Denotational Approach to Measuring Complexity in Functional Programs},
year = {2003},
isbn = {9780549000112},
publisher = {Carnegie Mellon University},
address = {USA}
}

@manual{WEIT,
title = {Workshop Escola de Informática Teórica},
url = {https://weit2019.wordpress.com/},
year = {2019}
}
